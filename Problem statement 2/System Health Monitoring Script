import psutil
import shutil
import logging

# Setup logging
logging.basicConfig(filename='system_health.log', level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')

# Thresholds
CPU_THRESHOLD = 80  # in percent
MEM_THRESHOLD = 80  # in percent
DISK_THRESHOLD = 80  # in percent

def check_cpu():
    cpu = psutil.cpu_percent(interval=1)
    if cpu > CPU_THRESHOLD:
        logging.warning(f"High CPU Usage: {cpu}%")
        print(f"ALERT: High CPU Usage - {cpu}%")
    return cpu

def check_memory():
    memory = psutil.virtual_memory()
    mem_percent = memory.percent
    if mem_percent > MEM_THRESHOLD:
        logging.warning(f"High Memory Usage: {mem_percent}%")
        print(f"ALERT: High Memory Usage - {mem_percent}%")
    return mem_percent

def check_disk():
    disk = shutil.disk_usage("/")
    used = disk.used / disk.total * 100
    if used > DISK_THRESHOLD:
        logging.warning(f"High Disk Usage: {used:.2f}%")
        print(f"ALERT: High Disk Usage - {used:.2f}%")
    return used

def list_top_processes(limit=5):
    print("\nTop Processes by CPU Usage:")
    procs = [(p.pid, p.info['name'], p.info['cpu_percent']) for p in psutil.process_iter(['name', 'cpu_percent'])]
    top = sorted(procs, key=lambda x: x[2], reverse=True)[:limit]
    for pid, name, cpu in top:
        print(f"{name} (PID: {pid}) - CPU: {cpu}%")

if __name__ == "__main__":
    print("System Health Monitor Running...\n")
    check_cpu()
    check_memory()
    check_disk()
    list_top_processes()
